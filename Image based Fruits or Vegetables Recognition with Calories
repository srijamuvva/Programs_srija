import tensorflow as tf

# Print TensorFlow version
print("TensorFlow version:", tf._version_)

import keras

!pip install pandas

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)



import os
for dirname, _, filenames in os.walk('Downloads/archive'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

from pathlib import Path
import os.path
import pandas as pd
import matplotlib.pyplot as plt

train_dir=Path('Downloads/archive/train')
train_filepaths=list(train_dir.glob(r'*/.jpg'))

test_dir=Path('Downloads/archive/test')
test_filepaths=list(test_dir.glob(r'*/.jpg'))
 
val_dir=Path('Downloads/archive/validation')
val_filepaths=list(val_dir.glob(r'*/.jpg'))

def image_processing(filepath):
    #create a dataframe with filepath and labels of the pictures
    
    labels=[str(filepath[i]).split("/")[-2] \
            for i in range(len(filepath))]

    filepath=pd.Series(filepath, name='Filepath').astype(str)
    labels=pd.Series(labels, name='Label')


    #Concatenate filepaths and labels

    df=pd.concat([filepath, labels], axis=1)

    #Shuffle the DataFrame and reset index

    df=df.sample(frac=1).reset_index(drop=True)
    return df
[11:36 AM, 6/28/2024] Varsha C4: train_def=image_processing(train_filepaths)
test_def=image_processing(test_filepaths)
val_def=image_processing(val_filepaths)


print('--Training set --\n')
print(f'Number of pictures: {train_def.shape[0]}\n')
print(f'Number of different labels:{len(train_def.Label.unique())}\n')
print(f'Labels: {train_def.Label.unique()}')

train_def.head(5)

import matplotlib.pyplot as plt
import pandas as pd

# Assuming train_def is your DataFrame and it has columns 'Label' and 'Filepath'
df_unique = train_def.copy().drop_duplicates(subset=["Label"]).reset_index()

fig, axes = plt.subplots(nrows=6, ncols=6, figsize=(8, 7), subplot_kw={'xticks': [], 'yticks': []})

for i, ax in enumerate(axes.flat):
    ax.imshow(plt.imread(df_unique.Filepath[i]))
    ax.set_title(df_unique.Label[i], fontsize=12)

plt.tight_layout(pad=0.5)
plt.show()

train_generator=tf.keras.preprocessing.image.ImageDataGenerator(
    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input
)
test_generator=tf.keras.preprocessing.image.ImageDataGenerator(
    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input
)
[11:36 AM, 6/28/2024] Varsha C4: train_images=train_generator.flow_from_dataframe(
    dataframe=train_def,
    x_col='Filepath',
    y_col='Label',
    target_size=(224,224),
    color_mode='rgb',
    class_mode='categorical',
    batch_size=32,
    shuffle=True,
    seed=0,
    rotation_range=30,
    zoom_range=0.15,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.15,
    horizontal_flip=True,
    fill_mode='nearest'
)

val_images=train_generator.flow_from_dataframe(
    dataframe=val_def,
    x_col='Filepath', # Column name in val_def DataFrame containing file paths of images
    y_col='Label', # Column name in val_def DataFrame containing corresponding labels
    target_size=(224,224), # Target size of images to resize them to during data loading
    color_mode='rgb',  
    class_mode='categorical', #each label is one hot encoded
    batch_size=32,
    shuffle=True,
    seed=0,
    rotation_range=30,
    zoom_range=0.15,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.15,
    horizontal_flip=True,
    fill_mode='nearest'
)
[11:36 AM, 6/28/2024] Varsha C4: test_images=test_generator.flow_from_dataframe(
    dataframe=test_def,
    x_col='Filepath',
    y_col='Label',
    target_size=(224,224),
    color_mode='rgb',
    class_mode='categorical',
    batch_size=32,
    shuffle=False
)

pretrained_model=tf.keras.applications.MobileNetV2(
    input_shape=(224,224,3),
    include_top=False,
    weights='imagenet',
    pooling='avg'
)
pretrained_model.trainable=False

inputs = pretrained_model.input
x = tf.keras.layers.Dense(128, activation='relu')(pretrained_model.output)
x=tf.keras.layers.Dense(128,activation='relu')(x)
outputs = tf.keras.layers.Dense(36, activation='softmax')(x)
model = tf.keras.Model(inputs=inputs, outputs=outputs)
model.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=['accuracy'])
history = model.fit(
    train_images,
    validation_data=val_images, 
    batch_size=32, 
    epochs=5, 
    callbacks=[
        tf.keras.callbacks.EarlyStopping(
            monitor='val_loss', 
            patience=2, 
            restore_best_weights=True
        )
    ]
)

import numpy as np  
pred = model.predict(test_images)
pred = np.argmax(pred, axis=1) 
labels = (train_images.class_indices)
labels = dict((v, k) for k, v in labels.items())
pred1 = [labels[k] for k in pred]
pred1

from keras.utils import load_img, img_to_array
def output(location):
    img=load_img(location,target_size=(224,224,3))
    img=img_to_array(img)
    img=img/255
    img=np.expand_dims(img,[0])
    ans=model.predict(img)
    y_class=ans.argmax(axis=-1)
    y=" ".join(str(x) for x in y_class)
    y=int(y)
    res=labels[y]
    return res

img=output('Downloads/Red_Apple.jpeg')
img

model.save('Image based Fruits or Vegtables Recognition with Calories.h5')
